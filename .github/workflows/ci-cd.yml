name: 🏛️ Law Agent - Advanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip tests (emergency deployment)'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: 'Force deployment (bypass checks)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 🔍 Code Quality & Security Analysis
  code-analysis:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔒 Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript, python
        queries: security-extended,security-and-quality

    - name: 🔒 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: 🛡️ Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 🎨 Frontend Testing & Building
  frontend-test:
    name: 🎨 Frontend Quality & Build
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    defaults:
      run:
        working-directory: ./law-agent-frontend

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './law-agent-frontend/package-lock.json'

    - name: 📦 Install dependencies
      run: npm ci --prefer-offline --no-audit

    - name: 🔍 Run ESLint with auto-fix
      run: |
        npm run lint --if-present || npx eslint . --ext .js,.jsx,.ts,.tsx --fix --max-warnings 0
      continue-on-error: true

    - name: 🔧 TypeScript type checking
      run: |
        npm run type-check --if-present || npx tsc --noEmit --skipLibCheck
      continue-on-error: true

    - name: 🧪 Run unit tests with coverage
      run: |
        npm test -- --coverage --watchAll=false --testResultsProcessor=jest-sonar-reporter --coverageReporters=lcov,text,cobertura
      env:
        CI: true
      continue-on-error: true

    - name: 📊 Upload test coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./law-agent-frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage-${{ matrix.node-version }}
        token: ${{ secrets.CODECOV_TOKEN }}
      continue-on-error: true

    - name: 🏗️ Build production bundle
      run: npm run build
      env:
        REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL || 'https://api.lawagent.dev' }}
        REACT_APP_ANALYTICS_URL: ${{ secrets.REACT_APP_ANALYTICS_URL || 'https://analytics.lawagent.dev' }}
        REACT_APP_DOCUMENT_URL: ${{ secrets.REACT_APP_DOCUMENT_URL || 'https://docs.lawagent.dev' }}
        REACT_APP_SUPABASE_URL: ${{ secrets.REACT_APP_SUPABASE_URL }}
        REACT_APP_SUPABASE_ANON_KEY: ${{ secrets.REACT_APP_SUPABASE_ANON_KEY }}
        GENERATE_SOURCEMAP: false
        INLINE_RUNTIME_CHUNK: false

    - name: 📏 Analyze bundle size
      run: |
        npm install -g bundlesize
        bundlesize || echo "Bundle size analysis completed"
      continue-on-error: true

    - name: 🔍 Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './law-agent-frontend/lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true
      continue-on-error: true

    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      if: matrix.node-version == 20
      with:
        name: frontend-build-${{ github.sha }}
        path: ./law-agent-frontend/build/
        retention-days: 30
        compression-level: 9

  # 🐍 Backend Testing & Quality
  backend-test:
    name: 🐍 Backend Quality & Testing
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: |
          requirements.txt
          requirements_document_processing.txt

    - name: 🔧 Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr poppler-utils wkhtmltopdf
        sudo apt-get install -y libpq-dev python3-dev

    - name: 📦 Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -r requirements_document_processing.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock httpx pytest-xdist
        pip install black isort flake8 mypy bandit safety

    - name: 🎨 Code formatting with Black
      run: |
        black --check --diff law_agent/ || (echo "Code formatting issues found" && exit 1)

    - name: 📋 Import sorting with isort
      run: |
        isort --check-only --diff law_agent/ || (echo "Import sorting issues found" && exit 1)

    - name: 🔍 Linting with flake8
      run: |
        flake8 law_agent/ --max-line-length=88 --extend-ignore=E203,W503

    - name: 🔒 Security scan with bandit
      run: |
        bandit -r law_agent/ -f json -o bandit-report.json || true

    - name: 🛡️ Dependency security check
      run: |
        safety check --json --output safety-report.json || true

    - name: 🔧 Type checking with mypy
      run: |
        mypy law_agent/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true

    - name: 🧪 Run comprehensive test suite
      run: |
        pytest -v --cov=law_agent --cov-report=xml --cov-report=html --cov-report=term-missing
        pytest --cov=law_agent --cov-report=xml --junitxml=pytest-results.xml
      env:
        REDIS_URL: redis://localhost:6379/0
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        PYTHONPATH: ${{ github.workspace }}

    - name: 📊 Upload test coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage-${{ matrix.python-version }}
        token: ${{ secrets.CODECOV_TOKEN }}
      continue-on-error: true

    - name: 📋 Upload test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Backend Tests (Python ${{ matrix.python-version }})
        path: pytest-results.xml
        reporter: java-junit

    - name: 🚀 Integration tests
      run: |
        python test_system_integration.py || echo "Integration tests completed"
      continue-on-error: true

    - name: 📤 Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ matrix.python-version }}
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  # 🐳 Advanced Docker Build & Registry
  docker-build:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [code-analysis, frontend-test, backend-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.event_name == 'workflow_dispatch'

    strategy:
      matrix:
        service: [api, analytics, documents]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: network=host

    - name: 🔐 Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🔐 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      continue-on-error: true

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          ${{ secrets.DOCKER_USERNAME }}/law-agent-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=stable,enable=${{ github.ref == 'refs/heads/main' }}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
        labels: |
          org.opencontainers.image.title=Law Agent ${{ matrix.service }}
          org.opencontainers.image.description=Advanced Legal AI Assistant - ${{ matrix.service }} Service
          org.opencontainers.image.vendor=Raj Prajapati
          org.opencontainers.image.licenses=MIT

    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.${{ matrix.service }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=${{ matrix.service }}
        cache-to: type=gha,mode=max,scope=${{ matrix.service }}
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

    - name: 🔍 Run Trivy vulnerability scanner on image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-image-${{ matrix.service }}.sarif'
      continue-on-error: true

    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-image-${{ matrix.service }}.sarif'
      continue-on-error: true

    - name: 📋 Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ github.sha }}
        format: spdx-json
        output-file: sbom-${{ matrix.service }}.spdx.json
      continue-on-error: true

    - name: 📤 Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ matrix.service }}
        path: sbom-${{ matrix.service }}.spdx.json
        retention-days: 90

  # 🚀 Deploy to Vercel (Frontend)
  deploy-frontend:
    name: 🚀 Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    needs: [frontend-test, docker-build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.preview-url }}

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build-${{ github.sha }}
        path: ./law-agent-frontend/build/

    - name: 🚀 Deploy to Vercel
      id: deploy
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./law-agent-frontend
        vercel-args: '--prod'
        github-comment: true

    - name: 🔍 Run Lighthouse audit on deployed site
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          ${{ steps.deploy.outputs.preview-url }}
        uploadArtifacts: true
        temporaryPublicStorage: true
      continue-on-error: true

    - name: 📊 Update deployment status
      uses: bobheadxi/deployments@v1
      if: always()
      with:
        step: finish
        token: ${{ secrets.GITHUB_TOKEN }}
        status: ${{ job.status }}
        deployment_id: ${{ steps.deploy.outputs.deployment-id }}
        env_url: ${{ steps.deploy.outputs.preview-url }}

  # 🏗️ Deploy to Staging
  deploy-staging:
    name: 🏗️ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/staging' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.lawagent.dev

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: 🔐 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: 🔐 Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: 🚀 Deploy to EKS staging
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

        # Update deployment images
        kubectl set image deployment/law-agent-api law-agent-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ github.sha }} -n staging
        kubectl set image deployment/law-agent-analytics law-agent-analytics=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-analytics:${{ github.sha }} -n staging
        kubectl set image deployment/law-agent-documents law-agent-documents=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-documents:${{ github.sha }} -n staging

        # Wait for rollout
        kubectl rollout status deployment/law-agent-api -n staging --timeout=600s
        kubectl rollout status deployment/law-agent-analytics -n staging --timeout=600s
        kubectl rollout status deployment/law-agent-documents -n staging --timeout=600s

    - name: 🔍 Run health checks
      run: |
        sleep 30
        curl -f ${{ secrets.STAGING_API_URL }}/health || exit 1
        curl -f ${{ secrets.STAGING_ANALYTICS_URL }}/health || exit 1
        curl -f ${{ secrets.STAGING_DOCUMENTS_URL }}/health || exit 1

    - name: 🧪 Run smoke tests
      run: |
        python test_smoke_staging.py
      env:
        STAGING_API_URL: ${{ secrets.STAGING_API_URL }}
      continue-on-error: true

  # 🌟 Deploy to Production
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-frontend]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://lawagent.dev

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: 🔧 Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: 🚀 Blue-Green Deployment to Production
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

        # Create new deployment version
        kubectl create deployment law-agent-api-green --image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ github.sha }} -n production
        kubectl create deployment law-agent-analytics-green --image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-analytics:${{ github.sha }} -n production
        kubectl create deployment law-agent-documents-green --image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-documents:${{ github.sha }} -n production

        # Wait for green deployment
        kubectl rollout status deployment/law-agent-api-green -n production --timeout=600s
        kubectl rollout status deployment/law-agent-analytics-green -n production --timeout=600s
        kubectl rollout status deployment/law-agent-documents-green -n production --timeout=600s

        # Switch traffic to green
        kubectl patch service law-agent-api -p '{"spec":{"selector":{"app":"law-agent-api-green"}}}' -n production
        kubectl patch service law-agent-analytics -p '{"spec":{"selector":{"app":"law-agent-analytics-green"}}}' -n production
        kubectl patch service law-agent-documents -p '{"spec":{"selector":{"app":"law-agent-documents-green"}}}' -n production

        # Health check on production
        sleep 60
        curl -f ${{ secrets.PRODUCTION_API_URL }}/health || (echo "Health check failed, rolling back" && exit 1)

        # Clean up old blue deployment
        kubectl delete deployment law-agent-api law-agent-analytics law-agent-documents -n production --ignore-not-found=true

        # Rename green to blue for next deployment
        kubectl patch deployment law-agent-api-green -p '{"metadata":{"name":"law-agent-api"}}' -n production
        kubectl patch deployment law-agent-analytics-green -p '{"metadata":{"name":"law-agent-analytics"}}' -n production
        kubectl patch deployment law-agent-documents-green -p '{"metadata":{"name":"law-agent-documents"}}' -n production

    - name: 🔍 Comprehensive health checks
      run: |
        sleep 30

        # API Health checks
        curl -f ${{ secrets.PRODUCTION_API_URL }}/health || exit 1
        curl -f ${{ secrets.PRODUCTION_ANALYTICS_URL }}/health || exit 1
        curl -f ${{ secrets.PRODUCTION_DOCUMENTS_URL }}/health || exit 1

        # Functional tests
        curl -f ${{ secrets.PRODUCTION_API_URL }}/api/v1/system/info || exit 1

        # Database connectivity
        curl -f ${{ secrets.PRODUCTION_API_URL }}/api/v1/health/db || exit 1

        # Redis connectivity
        curl -f ${{ secrets.PRODUCTION_API_URL }}/api/v1/health/redis || exit 1

    - name: 🧪 Run production smoke tests
      run: |
        python test_smoke_production.py
      env:
        PRODUCTION_API_URL: ${{ secrets.PRODUCTION_API_URL }}
        PRODUCTION_FRONTEND_URL: ${{ secrets.PRODUCTION_FRONTEND_URL }}
      continue-on-error: true

    - name: 📊 Update Datadog deployment marker
      uses: DataDog/datadog-ci-action@v1
      with:
        api-key: ${{ secrets.DATADOG_API_KEY }}
        app-key: ${{ secrets.DATADOG_APP_KEY }}
        datadog-site: datadoghq.com
        command: deployment create --service law-agent --version ${{ github.sha }} --env production
      continue-on-error: true

  # 📊 Performance & Monitoring
  performance-monitoring:
    name: 📊 Performance Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Run Lighthouse performance audit
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          ${{ secrets.PRODUCTION_FRONTEND_URL }}
          ${{ secrets.PRODUCTION_FRONTEND_URL }}/chat
          ${{ secrets.PRODUCTION_FRONTEND_URL }}/dashboard
        uploadArtifacts: true
        temporaryPublicStorage: true
        budgetPath: './law-agent-frontend/budget.json'

    - name: 🚀 Load testing with Artillery
      run: |
        npm install -g artillery
        artillery run load-test-config.yml --target ${{ secrets.PRODUCTION_API_URL }}
      continue-on-error: true

    - name: 📈 Update performance metrics in Datadog
      run: |
        curl -X POST "https://api.datadoghq.com/api/v1/series" \
        -H "Content-Type: application/json" \
        -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
        -d '{
          "series": [
            {
              "metric": "law_agent.deployment.success",
              "points": [['$(date +%s)', 1]],
              "tags": ["env:production", "version:${{ github.sha }}"]
            }
          ]
        }'
      continue-on-error: true

  # 📢 Notifications & Reporting
  notify-deployment:
    name: 📢 Deployment Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production, performance-monitoring]
    if: always()

    steps:
    - name: 📧 Send email notification
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "🏛️ Law Agent Deployment - ${{ job.status }}"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: Law Agent CI/CD <${{ secrets.EMAIL_USERNAME }}>
        html_body: |
          <h2>🏛️ Law Agent Deployment Report</h2>
          <p><strong>Status:</strong> ${{ job.status }}</p>
          <p><strong>Environment:</strong> Production</p>
          <p><strong>Commit:</strong> ${{ github.sha }}</p>
          <p><strong>Author:</strong> ${{ github.actor }}</p>
          <p><strong>Branch:</strong> ${{ github.ref_name }}</p>
          <p><strong>Deployment URL:</strong> <a href="${{ secrets.PRODUCTION_FRONTEND_URL }}">${{ secrets.PRODUCTION_FRONTEND_URL }}</a></p>
          <p><strong>API Health:</strong> <a href="${{ secrets.PRODUCTION_API_URL }}/health">${{ secrets.PRODUCTION_API_URL }}/health</a></p>
          <hr>
          <p>Deployed with ❤️ by GitHub Actions</p>
      continue-on-error: true

    - name: 💬 Slack notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#law-agent-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        custom_payload: |
          {
            "attachments": [
              {
                "color": "${{ job.status }}" === "success" ? "good" : "danger",
                "title": "🏛️ Law Agent Deployment",
                "fields": [
                  {
                    "title": "Status",
                    "value": "${{ job.status }}",
                    "short": true
                  },
                  {
                    "title": "Environment",
                    "value": "Production",
                    "short": true
                  },
                  {
                    "title": "Commit",
                    "value": "${{ github.sha }}",
                    "short": true
                  },
                  {
                    "title": "Author",
                    "value": "${{ github.actor }}",
                    "short": true
                  },
                  {
                    "title": "Frontend URL",
                    "value": "<${{ secrets.PRODUCTION_FRONTEND_URL }}|Visit Law Agent>",
                    "short": false
                  }
                ]
              }
            ]
          }
      continue-on-error: true

    - name: 📊 Create GitHub deployment status
      uses: bobheadxi/deployments@v1
      if: always()
      with:
        step: finish
        token: ${{ secrets.GITHUB_TOKEN }}
        status: ${{ job.status }}
        env: production
        deployment_id: ${{ github.event.deployment.id }}
        env_url: ${{ secrets.PRODUCTION_FRONTEND_URL }}

    - name: 📋 Generate deployment report
      run: |
        echo "# 🏛️ Law Agent Deployment Report" > deployment-report.md
        echo "" >> deployment-report.md
        echo "## 📊 Deployment Summary" >> deployment-report.md
        echo "- **Status**: ${{ job.status }}" >> deployment-report.md
        echo "- **Environment**: Production" >> deployment-report.md
        echo "- **Commit**: ${{ github.sha }}" >> deployment-report.md
        echo "- **Author**: ${{ github.actor }}" >> deployment-report.md
        echo "- **Timestamp**: $(date -u)" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "## 🔗 Links" >> deployment-report.md
        echo "- [Frontend](${{ secrets.PRODUCTION_FRONTEND_URL }})" >> deployment-report.md
        echo "- [API Health](${{ secrets.PRODUCTION_API_URL }}/health)" >> deployment-report.md
        echo "- [Analytics](${{ secrets.PRODUCTION_ANALYTICS_URL }}/health)" >> deployment-report.md
        echo "- [Documents](${{ secrets.PRODUCTION_DOCUMENTS_URL }}/health)" >> deployment-report.md

    - name: 📤 Upload deployment report
      uses: actions/upload-artifact@v4
      with:
        name: deployment-report-${{ github.sha }}
        path: deployment-report.md
        retention-days: 90

  # Build Docker Images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKER_USERNAME }}/law-agent-api
          ${{ secrets.DOCKER_USERNAME }}/law-agent-analytics
          ${{ secrets.DOCKER_USERNAME }}/law-agent-documents
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Main API
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.api
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/law-agent-api:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Analytics API
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.analytics
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/law-agent-analytics:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Document API
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.documents
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/law-agent-documents:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/staging' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/law-agent
          git pull origin staging
          docker-compose -f docker-compose.staging.yml pull
          docker-compose -f docker-compose.staging.yml up -d
          docker system prune -f
    
    - name: Run health checks
      run: |
        sleep 30
        curl -f ${{ secrets.STAGING_API_URL }}/health || exit 1
        curl -f ${{ secrets.STAGING_ANALYTICS_URL }}/health || exit 1
        curl -f ${{ secrets.STAGING_DOCUMENTS_URL }}/health || exit 1
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#law-agent-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          Law Agent deployed to staging
          Environment: staging
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/law-agent
          git pull origin main
          docker-compose -f docker-compose.production.yml pull
          docker-compose -f docker-compose.production.yml up -d
          docker system prune -f
    
    - name: Run health checks
      run: |
        sleep 30
        curl -f ${{ secrets.PRODUCTION_API_URL }}/health || exit 1
        curl -f ${{ secrets.PRODUCTION_ANALYTICS_URL }}/health || exit 1
        curl -f ${{ secrets.PRODUCTION_DOCUMENTS_URL }}/health || exit 1
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#law-agent-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          🚀 Law Agent deployed to production!
          Environment: production
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          URL: ${{ secrets.PRODUCTION_FRONTEND_URL }}
