name: Law Agent CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend Testing and Building
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./law-agent-frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './law-agent-frontend/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Run TypeScript check
      run: npm run type-check
    
    - name: Run tests
      run: npm run test -- --coverage --watchAll=false
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./law-agent-frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
    
    - name: Build frontend
      run: npm run build
      env:
        REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
        REACT_APP_ANALYTICS_URL: ${{ secrets.REACT_APP_ANALYTICS_URL }}
        REACT_APP_DOCUMENT_URL: ${{ secrets.REACT_APP_DOCUMENT_URL }}
        REACT_APP_SUPABASE_URL: ${{ secrets.REACT_APP_SUPABASE_URL }}
        REACT_APP_SUPABASE_ANON_KEY: ${{ secrets.REACT_APP_SUPABASE_ANON_KEY }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: ./law-agent-frontend/build/
        retention-days: 7

  # Backend Testing
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr poppler-utils
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_document_processing.txt
        pip install pytest pytest-cov pytest-asyncio httpx
    
    - name: Run Python tests
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html
      env:
        REDIS_URL: redis://localhost:6379
        DATABASE_URL: sqlite:///test.db
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage
    
    - name: Test analytics system
      run: python test_analytics_system.py
    
    - name: Test document processing
      run: python test_document_processing.py

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Setup Node.js for frontend security scan
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Run npm audit
      working-directory: ./law-agent-frontend
      run: |
        npm ci
        npm audit --audit-level=high
    
    - name: Setup Python for backend security scan
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Run safety check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          trivy-results.sarif
          safety-report.json

  # Build Docker Images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKER_USERNAME }}/law-agent-api
          ${{ secrets.DOCKER_USERNAME }}/law-agent-analytics
          ${{ secrets.DOCKER_USERNAME }}/law-agent-documents
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Main API
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.api
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/law-agent-api:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Analytics API
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.analytics
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/law-agent-analytics:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Document API
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.documents
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/law-agent-documents:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/staging' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/law-agent
          git pull origin staging
          docker-compose -f docker-compose.staging.yml pull
          docker-compose -f docker-compose.staging.yml up -d
          docker system prune -f
    
    - name: Run health checks
      run: |
        sleep 30
        curl -f ${{ secrets.STAGING_API_URL }}/health || exit 1
        curl -f ${{ secrets.STAGING_ANALYTICS_URL }}/health || exit 1
        curl -f ${{ secrets.STAGING_DOCUMENTS_URL }}/health || exit 1
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#law-agent-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          Law Agent deployed to staging
          Environment: staging
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/law-agent
          git pull origin main
          docker-compose -f docker-compose.production.yml pull
          docker-compose -f docker-compose.production.yml up -d
          docker system prune -f
    
    - name: Run health checks
      run: |
        sleep 30
        curl -f ${{ secrets.PRODUCTION_API_URL }}/health || exit 1
        curl -f ${{ secrets.PRODUCTION_ANALYTICS_URL }}/health || exit 1
        curl -f ${{ secrets.PRODUCTION_DOCUMENTS_URL }}/health || exit 1
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#law-agent-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          ðŸš€ Law Agent deployed to production!
          Environment: production
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          URL: ${{ secrets.PRODUCTION_FRONTEND_URL }}
